#!/usr/bin/env python3

import sys, argparse, time, re
from icecream import ic
from rpi_ws281x import PixelStrip, Color

def components(color):
    r = color >> 16
    g = (color & 0x00ff00) >> 8
    b = (color & 0x0000ff)
    return (r, g, b)

def compose(r, g, b):
    return (r << 16) | (g << 8) | b

def brighter(color, factor):
    return compose(*[int(c*factor) for c in components(color)])

def darker(color, factor):
    return compose(*[int(c/factor) for c in components(color)])

# Source: https://andi-siess.de/rgb-to-color-temperature/
# Thanks for that!

# Reference comments copied from Wikipedia
# https://en.wikipedia.org/wiki/Color_temperature
kelvin_table = {
    1000: (255, 56, 0, "Most commercial electric heating elements"),
    1100: (255, 71, 0),
    1200: (255, 83, 0),
    1300: (255, 93, 0),
    1400: (255, 101, 0),
    1500: (255, 109, 0),
    1600: (255, 115, 0),
    1700: (255, 121, 0, "Match flame, low pressure sodium lamps (LPS/SOX)"),
    1800: (255, 126, 0, "Candle flame, sunset/sunrise"),
    1900: (255, 131, 0),
    2000: (255, 138, 18),
    2100: (255, 142, 33),
    2200: (255, 147, 44),
    2300: (255, 152, 54),
    2400: (255, 157, 63, "Standard incandescent lamps"),
    2500: (255, 161, 72, "Soft white incandescent lamps"),
    2600: (255, 165, 79),
    2700: (255, 169, 87, "“Soft white” compact fluorescent and LED lamps"),
    2800: (255, 173, 94),
    2900: (255, 177, 101),
    3000: (255, 180, 107, "Warm white compact fluorescent and LED lamps"),
    3100: (255, 184, 114),
    3200: (255, 187, 120, "Studio lamps, photofloods, etc."),
    3300: (255, 190, 126),
    3400: (255, 193, 132),
    3500: (255, 196, 137),
    3600: (255, 199, 143),
    3700: (255, 201, 148),
    3800: (255, 204, 153),
    3900: (255, 206, 159),
    4000: (255, 209, 163),
    4100: (255, 211, 168),
    4200: (255, 213, 173),
    4300: (255, 215, 177),
    4400: (255, 217, 182),
    4500: (255, 219, 186),
    4600: (255, 221, 190),
    4700: (255, 223, 194),
    4800: (255, 225, 198),
    4900: (255, 227, 202),
    5000: (255, 228, 206, "Horizon daylight, Tubular fluorescent lamps or cool white/daylight compact fluorescent lamps (CFL)"),
    5100: (255, 230, 210),
    5200: (255, 232, 213),
    5300: (255, 233, 217),
    5400: (255, 235, 220),
    5500: (255, 236, 224, "Vertical daylight, electronic flash (lower limit)"),
    5600: (255, 238, 227),
    5700: (255, 239, 230),
    5800: (255, 240, 233),
    5900: (255, 242, 236),
    6000: (255, 243, 239, "Vertical daylight, electronic flash (upper limit)"),
    6100: (255, 244, 242),
    6200: (255, 245, 245, "Xenon short-arc lamp"),
    6300: (255, 246, 247),
    6400: (255, 248, 251),
    6500: (255, 249, 253, "Daylight, overcast"),
    6600: (254, 249, 255),
    6700: (252, 247, 255),
    6800: (249, 246, 255),
    6900: (247, 245, 255),
    7000: (245, 243, 255),
    7100: (243, 242, 255),
    7200: (240, 241, 255),
    7300: (239, 240, 255),
    7400: (237, 239, 255),
    7500: (235, 238, 255),
    7600: (233, 237, 255),
    7700: (231, 236, 255),
    7800: (230, 235, 255),
    7900: (228, 234, 255),
    8000: (227, 233, 255),
    8100: (225, 232, 255),
    8200: (224, 231, 255),
    8300: (222, 230, 255),
    8400: (221, 230, 255),
    8500: (220, 229, 255),
    8600: (218, 229, 255),
    8700: (217, 227, 255),
    8800: (216, 227, 255),
    8900: (215, 226, 255),
    9000: (214, 225, 255),
    9100: (212, 225, 255),
    9200: (211, 224, 255),
    9300: (210, 223, 255),
    9400: (209, 223, 255),
    9500: (208, 222, 255),
    9600: (207, 221, 255),
    9700: (207, 221, 255),
    9800: (206, 220, 255),
    9900: (205, 220, 255),
    10000: (207, 218, 255),
    10100: (207, 218, 255),
    10200: (206, 217, 255),
    10300: (205, 217, 255),
    10400: (204, 216, 255),
    10500: (204, 216, 255),
    10600: (203, 215, 255),
    10700: (202, 215, 255),
    10800: (202, 214, 255),
    10900: (201, 214, 255),
    11000: (200, 213, 255),
    11100: (200, 213, 255),
    11200: (199, 212, 255),
    11300: (198, 212, 255),
    11400: (198, 212, 255),
    11500: (197, 211, 255),
    11600: (197, 211, 255),
    11700: (197, 210, 255),
    11800: (196, 210, 255),
    11900: (195, 210, 255),
    12000: (195, 209, 255),
    15000: (255, 255, 255, "Clear blue poleward sky (maximum here)")}

def main():
    def parse_int(s):
        if s.startswith("0x"):
            return int(s[2:], 16)
        else:
            return int(s)

    range_re = re.compile(r"(\d+)[-–](\d+)|(\d+)")
    def parse_number_range(r):
        match = range_re.match(r)
        if match is None:
            raise ValueError("Range syntax error in " + repr(r))
        else:
            first, last, no = match.groups()
            if first and last:
                return set(range(int(first), int(last)+1))
            else:
                return {int(no)}

    def parse_number_ranges(r):
        ret = set()
        for R in r.split(","):
            ret |= parse_number_range(R)
        return ret

    parser = argparse.ArgumentParser(description="Test script for PixelStrips")
    parser.add_argument("-c", "--count", help="Number of LED pixels", type=int,
                        default=None)
    parser.add_argument("-g", "--gpio", help="GPIO pin connected to the pixels"
                        "18 uses PWM, 10 uses SPI /dev/spidev0.0, 21 uses PCM",
                        default=18, type=int)
    parser.add_argument("--led-freq", help="LED signal frequency in hertz "
                        "(usually 800khz)", default=800000, type=int)
    parser.add_argument("--dma", help="DMA channel to use for generating "
                        "signal (try 10)", default=10, type=int)
    parser.add_argument("--brightness", help="Set to 0 for darkest and 255 for "
                        "brightest.", default=255, type=int)
    parser.add_argument("--invert", help="True to invert the signal (when "
                        "using NPN transistor level shift)",
                        action="store_true", default=False)
    parser.add_argument("--channel", help="Set to 1 by default for GPIOs "
                        "13, 19, 41, 45, or 53, otherwise 0.",
                        default=None, type=int)
    parser.add_argument("-C", "--color", help="RGB representation of the color"
                        "to be used.", default=None, type=parse_int)
    parser.add_argument("-d", "--darker", default=1.0, type=float,
                        help="Calculate a darker version of the color before "
                        "applying.")
    parser.add_argument("-b", "--brighter", default=1.0, type=float,
                        help="Calculate a brighter version of the color before "
                        "applying.")
    parser.add_argument("-t", "--color-temperature", default=5000, type=int,
                        help="Color temperature of “white” to use, devideable "
                        "by 100. Defaults to 15000 (0xffffff).")
    parser.add_argument("--list-temperatures", action="store_true",
                        default=False,
                        help="List color temperature values with comments "
                        "and quit.")
    parser.add_argument("--cycle", help="Do not light all the pixels at once, "
                        "but one after the other pausing for “duration” below.",
                        action="store_true", default=False)
    parser.add_argument("-D", "--duration",
                        help="Pause between lights on cycle.",
                        default=0.5, type=float)
    parser.add_argument("-v", "--verbose", help="Be verbose",
                        action="store_true", default=False)
    parser.add_argument("-p", "--pause", help="Wait for <enter> after each "
                        "light on cycle.",
                        action="store_true", default=False)
    parser.add_argument("-0", "--off", action="store_true", default=False,
                        help="Turn all pixels off on startup.")
    parser.add_argument("numbers", nargs="*", type=parse_number_ranges,
                        help="Which pixels to activate. Indeces are 0-based."
                        "Ranges may be specified using <start>-<end>.")

    args = parser.parse_args()

    if args.numbers:
        numbers = set()
        for n in args.numbers:
            numbers |= n
        numbers = list(numbers)
        numbers.sort()
        if args.count is None:
            # The numbers passed on the cmd line are ordinals.
            # This is a count.
            args.count = max(numbers) + 1
    else:
        if args.count is None:
            args.count = 200

        numbers = list(range(args.count))

    if args.list_temperatures:
        for k, tpl in kelvin_table.items():
            if len(tpl) == 4:
                print("%5i" % k, tpl[3])
        sys.exit(0)

    if args.channel is None:
        channel = 0
        if args.gpio in { 13, 19, 41, 45, 53 }:
            channel = 1
    else:
        channel = args.channel

    strip = PixelStrip(args.count, args.gpio, args.led_freq, args.dma,
                       args.invert, args.brightness, channel)
    # Intialize the library (must be called once before other functions).
    strip.begin()

    if args.off:
        for a in numbers:
            strip[a] = 0x00

    # white = 0xffffff
    # warmwhite = 0xe18024
    # warmwhite = 0x553311 # darker
    # warmwhite = 0x191105 # darker still

    if args.color is not None:
        color = args.color
    else:
        if args.color_temperature in kelvin_table:
            key = args.color_temperature
        else:
            keys = list(kelvin_table.keys())
            key = keys[min(range(len(keys)),
                           key = lambda i: abs(keys[i]-args.color_temperature))]

        color = compose(*kelvin_table[key][:3])

    if args.darker != 1.0:
        color = darker(color, args.darker)

    if args.brighter != 1.0:
        color = brighter(color, args.brighter)

    if args.cycle:
        try:
            while True:
                for a in numbers:
                    strip[a] = color
                    strip.show()

                    if args.pause:
                        print(a, "hit <return>", end="")
                        input()
                    else:
                        if args.verbose:
                            print(a)
                        time.sleep(args.duration)

                    strip[a] = 0

                if args.pause or args.verbose:
                    print()
        except KeyboardInterrupt:
            print()
            strip[a] = 0
    else:
        for a in numbers:
            strip[a] = color

    ic(strip.size)
    strip.show()

    #while True:
    #    for a in range(strip.size):
    #        strip[a] = color
    #        strip.show()
    #        time.sleep(.5)
    #        strip[a] = 0x000000

main()
